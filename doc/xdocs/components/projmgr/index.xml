<?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
    <document>

<header><title>
Project Management using ProjMgr</title></header>

<body>
<p>

</p>
<section id="Overview"><title>Overview</title>
<p>
ProjMgr is a tool for managing projects like XLattice which consist 
of a number of <strong>
components</strong>
 which are used together but developed more
or less independently.  Each component will have its own source and 
test directories and the software for each will be delivered 
separately.  However shared resources such as jars will be found in
a common repository.
</p>
<p>
XLattice uses <a href="http://ant.apache.org">
Ant</a>
 to manage builds and
<a href="http://www.junit.org">
JUnit</a>
 to automate unit testing.  All components
inherit common properties from a shared <code>
project.xml</code>
 control file and
then have specific characteristics specified in a local <code>
project.xml</code>
.
The Ant builds and JUnit unit tests are controlled by two files: 
<code>
classpath.sh</code>
 sets up the Java classpath and <code>
build.sh</code>
 is used by
Ant during the build (under Windows, <code>
.bat</code>
 files provide the same
service).
</p>
<p>
ProjMgr helps keep component development consistent by generating 
build files from the two <code>
project.xml</code>
 files.  If executed in a 
component's base directory, ProjMgr will generate five files:
</p>
<source>
build.xml     -- the Ant build file
classpath.sh  -- sets up the Java classpath, invoked by build.sh
build.sh      -- runs Ant using build.xml
classpath.bat -- Windows equivalent of classpath.sh
build.bat     -- runs Ant under Windows</source>
<p>

</p>
<p>
<em>
(Note: the Windows versions of these files are not created by</em>

<code>
projmgr 0.1,</code>
 <em>
but should be in the next release.)</em>

</p>
<p>
The <code>
init</code>
 target of <code>
build.xml</code>
 will make sure that all necessary
component subdirectories exist.  To create a new XLattice subproject,
<code>
dummy</code>
, for example, 
requires two steps.  First,
</p>
<source>
cd $XLATTICE_HOME
mkdir dummy
cd dummy
projmgr -a -c</source>
<p>

creates the necessary subdirectory and configuration files.  Then
</p>
<source>
./build.sh init</source>
<p>

creates the subdirectories for Java source code, unit tests, documentation
(<code>
jml</code>
 and <code>
xdocs</code>
), and build results ('target' and its subdirectories).
  
</p>
</section>
<section id="DirectoryStructure"><title>Directory Structure</title>
<p>
The current top-level XLattice directory structure is:
</p>
<source>
xlattice
  project.xml
  bin
  lib
  corexml
  projmgr
  util</source>
<p>

</p>
<p>
The first file, <code>
project.xml</code>
, sets up configuration elements shared
by the entire project.
</p>
<section id="bin"><title>bin </title>
<p>
The <code>
bin</code>
 directory must be on the path.  In a UNIX/Linux environment
running bash, this is effected by something similar to 
</p>
<source>
export XLATTICE_HOME=$HOME/xlattice
export PATH=$XLATTICE_HOME/bin:$PATH</source>
<p>

</p>
<p>
XLattice components normally put invocation scripts into <code>
xlattice/bin</code>
.
</p>
</section>
<section id="lib"><title>lib</title>
<p>
The <code>
lib</code>
 directory is a repository for the jars used by XLattice
components.  These are grouped into subdirectories by group ID, so 
that the XLattice jars, for example, are found in <code>
xlattice/lib/xlattice</code>
:
</p>
<source>
xlattice
    lib
      xlattice
        corexml-0.1.jar
        projmgr-0.1.jar
        util-0.1.jar
        LICENSE.txt</source>
<p>

</p>
</section>
<section id="ComponentSubdirectories"><title>Component Subdirectories</title>
<p>
<code>
util, corexml,</code>
 and <code>
projmgr</code>
 are the component subdirectories.
</p>
<p>
These have a common structure, with minor
variations.  For example, the <code>
xlattice/corexml</code>
 subdirectory 
looks like this:
</p>
<source>
xlattice
  corexml
    project.xml
    build.xml
    classpath.bat
    classpath.sh
    build.bat
    build.sh 
    src
      java
      test
    target
      classes
      test-classes
      docs
    jml
    xdocs</source>
<p>

</p>
<p>
<code>
project.xml</code>
 contains configuration information for the component.
</p>
<p>
The next five files are generated by <code>
projmgr</code>
 from the configuration
file, using both information from <code>
project.xml</code>
 and defaults from the
parent, <code>
../project.xml</code>
.
</p>
<p>
The directories that follow are created by Ant the first time it is
run.  <code>
src/java</code>
 contains Java source code organized by package name.
The code for <code>
org.xlattice.projmgr</code>
, for example, is found under
<code>
src/java/org/xlattice/projmgr</code>
.  Source code for unit tests is in 
a parallel hierarchy under <code>
src/test</code>
.  
</p>
<p>
During the build, compilation generates the same tree structures
under <code>
target</code>
, with source code classes under <code>
target/classes</code>
 and
compiled test clases under <code>
target/test-classes</code>
.
</p>
</section>
<section id="Documentation"><title>Documentation</title>
<p>
Documentation production is similarly automated.  Javadocs 
generated from the source code are written to <code>
target/docs/api</code>
.  
HTML documentation generated from <code>
.xml</code>
 files under <code>
xdocs</code>

also appears under <code>
target/docs</code>
.
</p>
<p>
The only part of the process that is not currently automated is the
translation of JML scripts into the XML-format files used to generate
HTML.  This problem should be addressed in the near future, probably
by <code>
projmgr-0.3</code>
.
</p>
</section>
</section>
<section id="TheProjectFile"><title>The Project File</title>
<p>
There is a project file, <code>
project.xml,</code>
 for each XLattice component.
This is an XML file containing a single <code>
&lt;project&gt;</code>
 element.  Its
most important subelements are
</p>
<table>
<tr>
<td>
<strong>
name</strong>
  </td>
<td>
 <strong>
description</strong>
                         </td>
<td>
 <strong>
required?</strong>
   </td>
</tr>
<tr>
<td>
extends </td>
<td>
 path to any parent configuration file </td>
<td>
 no            </td>
</tr>
<tr>
<td>
id      </td>
<td>
 a single-word name for the component,
            conventionally in lower case        </td>
<td>
 yes           </td>
</tr>
<tr>
<td>
name    </td>
<td>
 a more descriptive name or phrase, 
            conventionally several words in 
            mixed uppper and lower case         </td>
<td>
 yes           </td>
</tr>
<tr>
<td>
version </td>
<td>
 a decimal number with optional 
            single-letter extension, for 
            example 4.2 or 0.1a                 </td>
<td>
 yes           </td>
</tr>
<tr>
<td>
description </td>
<td>
 a paragraph or so describing the component
                                                </td>
<td>
 no            </td>
</tr>
<tr>
<td>
shortDescription
        </td>
<td>
 brief summary of the above            </td>
<td>
 no            </td>
</tr>
<tr>
<td>
logo    </td>
<td>
 logo for the component, usually in 
            <code>
.png</code>
 file format, conventionally
            found under <code>
xdocs/images</code>
          </td>
<td>
 no            </td>
</tr>
<tr>
<td>
organization </td>
<td>
 described in more detail below   </td>
<td>
 no, defaults  </td>
</tr>
<tr>
<td>
dependencies </td>
<td>
 described in more detail below   </td>
<td>
 no            
</td>
</tr>
</table>
<p>
The <code>
&lt;organization&gt;</code>
 element is used for generating documentation.  
It is specified in the parent <code>
project.xml</code>
, can be overridden in 
the component configuration file, but should not be.
</p>
<table>
<tr>
<td>
<strong>
name</strong>
  </td>
<td>
 <strong>
description</strong>
                         </td>
<td>
 <strong>
required?</strong>
   </td>
</tr>
<tr>
<td>
name    </td>
<td>
 legal name of the organization, for
            use in license and copyright notices</td>
<td>
 no            </td>
</tr>
<tr>
<td>
url     </td>
<td>
 URL of the organization's Web site    </td>
<td>
 no            </td>
</tr>
<tr>
<td>
logo    </td>
<td>
 organization logo, for example 
            "xdocs/images/xlattice.png"         </td>
<td>
 no
</td>
</tr>
</table>
<p>
If there are any dependencies, they are described by repeating 
<code>
&lt;dependency&gt;</code>
 subelements.  These have the form
</p>
<table>
<tr>
<td>
<strong>
name</strong>
  </td>
<td>
 <strong>
description</strong>
                         </td>
<td>
 <strong>
required?</strong>
   </td>
</tr>
<tr>
<td>
groupId     </td>
<td>
 group name, such as <code>
xlattice</code>
 or <code>
ant</code>
   </td>
<td>
 yes   </td>
</tr>
<tr>
<td>
artifactId  </td>
<td>
 product or component name                 </td>
<td>
 yes   </td>
</tr>
<tr>
<td>
version     </td>
<td>
 version number consisting of alphanumeric
                characters, digits, dots, dashes, but
                no spaces                               </td>
<td>
 no    </td>
</tr>
<tr>
<td>
type        </td>
<td>
 file extension, defaults to <code>
jar</code>
         </td>
<td>
 no    </td>
</tr>
<tr>
<td>
url         </td>
<td>
 where to get the dependency               </td>
<td>
 yes   
</td>
</tr>
</table>
<p>
These subelements are used to build a file name of the form
<code>
artifactId.type</code>
 or <code>
artifactId-version.type</code>
,
depending upon whether a version is specified.  Ant will look 
for this in <code>
libdir/groupId</code>
.  If it is not present, Ant will try
to get it over the Internet from <code>
urlartifactId-version.type</code>
.
</p>
<p>
So if for example we have
</p>
<table>
<tr>
<td>
groupId     </td>
<td>
 xlattice  </td>
</tr>
<tr>
<td>
artifactId  </td>
<td>
 util      </td>
</tr>
<tr>
<td>
version     </td>
<td>
 0.1       </td>
</tr>
<tr>
<td>
url         </td>
<td>
 <a href="http://www.xlattice.org/jars/">
http://www.xlattice.org/jars/</a>

</td>
</tr>
</table>
<p>
then Ant will look for <code>
../lib/xlattice/util-0.1.jar</code>
 and failing to
find that will attempt to fetch it from 
<code>
http://www.xlattice.org/jars/util-0.1.jar</code>
.
</p>
<p>
Notice that while some punctuation marks are automatically supplied,
the terminating slash on the URL cannot be.  If there is no
slash at the end of the URL, the system interprets this as an 
instruction to add a space to the URL before appending the name 
of the jar.
</p>
<p>
A future revision of <code>
projmgr</code>
 will change the structure of the 
<code>
dependency</code>
 element, probably by adding an optional or alternative
<code>
fullurl</code>
 subelement, possibly in other ways.
</p>
</section>
<section id="BuildFileGenerationusingProjMgr"><title>Build File Generation using ProjMgr</title>
<p>
<code>
projmgr</code>
 is a command line utility.  In its current form the UNIX
version takes several options:
</p>
<source>
projmgr [-a] [-c] [-h] [-v]

  -a  generate build.xml for Ant
  -c  create the classpath.{bat,sh} and build.{bat, sh} command files
  -h  display a help message
  -v  show the version number</source>
<p>

</p>
<p>
If no option is specified, running <code>
projmgr</code>
 has no effect.
</p>
<p>
Configuration and command files are created in the current directory
from the information in <code>
./project.xml</code>
.
</p>
</section>
<section id="JML"><title>JML</title>
<p>
XLattice currently uses Maven to generate its
HTML documentation.  Maven expects input as XML, in so-called <em>
Anakia</em>

format.
</p>
<note>These references to Maven are obsolete.</note>
<p>
Writing in XML is tedious, error-prone, and time-consuming.  JML,
part of the ProjMgr component, makes
the author's job
much simpler by automatically generating XML from ordinary text with
some lightweight markups.
</p>
<p>
JML is based on the <a href="http://www.antlr.org">
Antlr</a>
 lexer/parser 
generator and was specifically
inspired by Terence Parr's <a href="http://www.antlr.org/TML/index.tml">
TML</a>
.
It differs from TML in minor points of syntax but more importantly in
what it generates.  Whereas TML converts text directly 
into HTML, JML produces
XML in a form designed for further transformation.  This allows us to
use JML to produce body copy like this, but then feed the output into
other tools which add menus, headers, and footers to make the finished
HTML Web page.
</p>
<p>
JML is more fully documented in the ProjMgr API, which can be 
reached via the menu to the left.  An Ant task is also forthcoming.
On the other hand, many will find it easier to understand how to use 
JML by looking through the JML script that produced this page, 
<code>
jml/components/projmgr/index.jml.</code>

</p>
</section>
</body>
</document>
