<?xml version="1.0" encoding="UTF-8"?>

<project default="test" name="transport" basedir=".">

  <property name="name"           value="transport"/>
  <property name="version"        value="0.2.1"/>
  <property name="projectName"    value="xlattice"/>
  <property file="project.properties"/>

  <!-- ======================================================= -->
  <!-- S O U R C E   P R O P E R T I E S                       -->
  <!-- ======================================================= -->
  <!-- this is an XLattice subproject, so root_dir is one up   -->
  <property name="root_dir"       value=".."/>
  <property name="src_dir"        value="src/java"/>
  <property name="test_src_dir"   value="src/test"/>
  <property name="xdoc_dir"       value="xdocs"/>
  <!-- ======================================================= -->
  <!-- B U I L D   P R O P E R T I E S                         -->
  <!-- ======================================================= -->
  <property name="build_dir" value="target"/>

  <property name="classes_dir"      value="${build_dir}/classes"/>
  <property name="lib_dir"          value="../lib"/>
  <property name="test_classes_dir" value="${build_dir}/test-classes"/>
  <property name="test_report_dir"  value="${build_dir}/test-reports"/>
  <property name="javadoc_dir"
                    value="${root_dir}/xdocs/components/${name}/api"/>
  <!-- ======================================================= -->
  <!-- D I S T R I B U T I O N   P R O P E R T I E S           -->
  <!-- ======================================================= -->
  <property name="component"        value="${name}"/>
  <!-- where the zip file goes -->
  <property name="zip_dir"          value="distribution"/>
  <!-- where a clean set of files is collected before zipping -->
  <property name="dist_base"        value="dist-files"/>
  <property name="dist_dir"         value="${dist_base}/xlattice"/>
  <property name="dist_lib"         value="${dist_dir}/lib"/>
  <property name="dist_name"        value="${name}-${version}"/>
  <!-- ======================================================= -->
  <!-- T E S T   P R O P E R T I E S                           -->
  <!-- ======================================================= -->
  <property name="clientPassword"   value="12345678"/>
  <property name="serverPassword"   value="87654321"/>
  <property name="client.private.keystore.name" value="test.client.private"/>
  <property name="client.public.keystore.name"  value="test.client.public"/>
  <property name="server.private.keystore.name" value="test.server.private"/>
  <property name="server.public.keystore.name"  value="test.server.public"/>

  <!-- ======================================================= -->
  <!-- I N I T                                                 -->
  <!-- ======================================================= -->
  <target name="init"
      description="o Initializes some properties">
    <mkdir dir="${lib_dir}"/>
    <condition property="clientKeystoresExist">
      <and>
        <available file="test.client.private"/>
        <available file="test.client.public"/>
      </and>
    </condition>
    <condition property="serverKeystoresExist">
      <and>
        <available file="test.server.private"/>
        <available file="test.server.public"/>
      </and>
    </condition>
  </target>

  <!-- ======================================================= -->
  <!-- K E Y S T O R E                                         -->
  <!-- ======================================================= -->

  <!-- M A K E  P R I V A T E                                  -->
  <target name="makePrivate">
    <echo message="makePrivate ${which}, password is ${pwd}"/>
    <!-- generate an RSA key pair and put it in a keystore -->
    <exec executable="keytool">
      <arg line="-genkey -alias ${which}private -keyalg RSA"/>
      <arg line="-keystore test.${which}.private -storetype JKS" />
      <arg line="-storepass ${pwd} -keypass ${pwd}"/>
      <arg line="-dname 'CN=test, OU=test, O=XLattice Project,L=town, S=region, C=country'"/>
    </exec>
    <!-- export the RSA public key to a temporary file -->
    <exec executable="keytool">
      <arg line="-export -alias ${which}private -keystore test.${which}.private"/>
      <arg line="-file temp.key -storepass ${pwd}"/>
    </exec>
    <!-- import that RSA public key into a separate keystore -->
    <exec executable="keytool">
      <arg line="-import -noprompt -alias ${which}public -keystore test.${which}.public"/>
      <arg line="-file temp.key -storepass ${pwd}"/>
    </exec>
    <!-- remove the temporary file -->
    <delete file="temp.key"/>

  </target>


  <!-- K E Y S T O R E S                                       -->
  <!--
    There are two pairs of keystores, client and server.  Each
    pair has a public and private keystore.  The rule is: if
    either keystore is missing, delete the other and regenerate
    both.  The private keystore is generated using a keygen
    call.  The public key is then exported from the private
    keystore to a file and the file then used to create the
    public keystore.
    -->

  <target name="clientKeystores" unless="clientKeystoresExist">
    <delete file="${client.private.keystore.name}"/>
    <delete file="${client.public.keystore.name}"/>
    <antcall target="makePrivate">
        <param name="which"      value="client"/>
        <param name="pwd"        value="${clientPassword}"/>
    </antcall>
  </target>

  <target name="serverKeystores" unless="serverKeystoresExist">
    <delete file="${server.private.keystore.name}"/>
    <delete file="${server.public.keystore.name}"/>
    <antcall target="makePrivate">
        <param name="which"      value="server"/>
        <param name="pwd"        value="${serverPassword}"/>
    </antcall>
  </target>

  <target name="keystores" description="o create keystores"
                   depends="init,clientKeystores,serverKeystores">

  </target>  <!-- FOO -->
  <!-- ======================================================= -->
  <!-- C O M P I L E   S O U R C E   F I L E S                 -->
  <!-- ======================================================= -->
  <target name="compile"         description="o Compile the code"
                                                   depends="init">
    <mkdir dir="${classes_dir}"/>
    <javac destdir="${classes_dir}" deprecation="true"
         debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="${src_dir}"/>
      </src>
      <classpath>
        <fileset dir="${lib_dir}">
          <include name="xlattice/util-0.3.10.jar"/>
          <include name="xlattice/crypto-0.2.0.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>
  <!-- ======================================================= -->
  <!-- C O M P I L E   T E S T S                               -->
  <!-- ======================================================= -->
  <target name="compile-tests" description="o Compile unit tests"
                                                depends="compile">
    <mkdir dir="${test_classes_dir}"/>
    <javac destdir="${test_classes_dir}" deprecation="true"
         debug="true" optimize="false" excludes="**/package.html"
        >
      <src>
        <pathelement location="${test_src_dir}"/>
      </src>
      <classpath>
        <fileset dir="${lib_dir}">
          <include name="junit/junit*.jar"/>
          <include name="xlattice/util-0.3.10.jar"/>
          <include name="xlattice/crypto-0.2.0.jar"/>
        </fileset>
        <pathelement path="${classes_dir}"/>
      </classpath>
    </javac>
  </target>
  <!-- ======================================================= -->
  <!-- U N I T  T E S T S                                      -->
  <!-- ======================================================= -->
  <target name="test"          description="o Run the unit tests"
                               depends="compile-tests,keystores">
    <mkdir dir="${test_report_dir}"/>
    <junit dir="./" failureproperty="test_failure" fork="true"
	       haltonerror="false" printSummary="yes" >
      <sysproperty key="basedir" value="."/>
      <sysproperty key="STUN_PRIMARY_ADDR"   value="${STUN_PRIMARY_ADDR}"/>
      <sysproperty key="STUN_SECONDARY_ADDR" value="${STUN_SECONDARY_ADDR}"/>
      <sysproperty key="STUN_PRIMARY_PORT"   value="${STUN_PRIMARY_PORT}"/>
      <sysproperty key="client.password"     value="${clientPassword}"/>
      <sysproperty key="server.password"     value="${serverPassword}"/>
      <sysproperty key="client.private.keystore.name"
                   value="${client.private.keystore.name}"/>
      <sysproperty key="client.public.keystore.name"
                   value="${client.public.keystore.name}"/>
      <sysproperty key="server.private.keystore.name"
                   value="${server.private.keystore.name}"/>
      <sysproperty key="server.public.keystore.name"
                   value="${server.public.keystore.name}"/>
      <formatter type="xml"/>
      <formatter usefile="false" type="plain"/>
      <classpath>
        <fileset dir="${lib_dir}">
          <include name="junit/junit*.jar"/>
          <include name="xlattice/util-0.3.10.jar"/>
          <include name="xlattice/crypto-0.2.0.jar"/>
        </fileset>
        <pathelement path="${test_classes_dir}"/>
        <pathelement path="${classes_dir}"/>
      </classpath>

      <batchtest todir="${test_report_dir}">
        <fileset dir="${test_src_dir}">
          <include name="**/tls/TestSimpleTls.java"/>
        </fileset>
      </batchtest>
      <!-- the usual collection
          <include name="**/TestAsyncTlsEchoers.java"/>
      
          <include name="**/Test*.java"/>
          <include name="**/TestAsync*.java"/>
          <include name="**/TestAttach*.java"/>
          <include name="**/TestIOScheduler.java"/>
          <exclude name="**/TestSchTls*.java"/>
          <include name="**/TestUdp*.java"/>
          <include name="**/Test*Packet*.java"/>

          <include name="**/tls/TestEchoers.java"/>
          <include name="**/tls/TestSimpleTls.java"/>
          <include name="**/tls/TestEchoClient.java"/>
          <include name="**/tls/TestEchoServer.java"/>

          <include name="**/TestBlockingTcp.java"/>
          <include name="**/TestIOScheduler.java"/>
          <include name="**/TestSchedulableTcp.java"/>
          <include name="**/mockery/Test*.java"/>
          <include name="**/tcp/TestTimeServer.java"/>

      -->
    </junit>
  </target>
  <!-- ======================================================= -->
  <!-- C R E A T E   J A R                                     -->
  <!-- ======================================================= -->
  <target name="jar"               description="o Create the jar"
                                                   depends="test">
    <jar jarfile="${build_dir}/${dist_name}.jar"
                excludes="**/package.html" basedir="${classes_dir}"/>
  </target>
  <!-- ======================================================= -->
  <!-- I N S T A L L   J A R                                   -->
  <!-- ======================================================= -->
  <target name="install-jar"      description="o Copy jar to lib"
                                                    depends="jar">
    <copy file="${build_dir}/${dist_name}.jar"
        todir="${lib_dir}/${projectName}"/>
  </target>
  <!-- ======================================================= -->
  <!-- G E N E R A T E   J A V A D O C                         -->
  <!-- ======================================================= -->
  <target name="javadoc"         description="o Generate javadoc"
                                            depends="install-jar">
    <mkdir dir="${javadoc_dir}"/>
    <tstamp>
      <format pattern="2004-yyyy" property="year"/>
    </tstamp>
    <property name="copyright"
      value="Copyright &amp;copy;  The XLattice Project. All Rights Reserved.">
    </property>
    <property name="title" value="XLattice Transport latest API">
    </property>
    <javadoc use="true" package="true" destdir="${javadoc_dir}"
        Overview="true" author="true" version="true"
        sourcepath="${src_dir}" packagenames="org.xlattice.*">
      <classpath>
        <pathelement location="${build_dir}/${dist_name}.jar"/>
        <fileset dir="${lib_dir}">
          <include name="junit/junit*.jar"/>
          <include name="xlattice/util-0.3.10.jar"/>
          <include name="xlattice/crypto-0.2.0.jar"/>
        </fileset>
      </classpath>
    </javadoc>
  </target>
  <!-- ======================================================= -->
  <!-- D I S T R I B U T I O N                                 -->
  <!-- ======================================================= -->
  <target name="dist"   description="o Create a full distribution"
                                                depends="javadoc">
    <mkdir  dir="${zip_dir}"/>
    <delete dir="${dist_dir}"/>
    <mkdir  dir="${dist_dir}/${component}"/>

    <!-- text files   -->
    <copy todir="${dist_dir}/${component}" >
      <fileset dir="${basedir}" includes="README*"/>
    </copy>
    <!-- jar for this component -->
    <copy todir="${dist_dir}/lib/xlattice" >
      <fileset dir="${lib_dir}/xlattice" includes="LICENSE*"/>
      <fileset dir="${build_dir}" includes="*.jar"/>
    </copy>
    <!-- dependencies -->
    <copy todir="${dist_dir}/lib/ant" >
        <fileset dir="${lib_dir}/ant" includes="*"/>
    </copy>
    <copy todir="${dist_dir}/lib/junit" >
        <fileset dir="${lib_dir}/junit" includes="*"/>
    </copy>

    <!-- project control files -->
    <copy todir="${dist_dir}/${component}" file="build.xml" />
    <copy todir="${dist_dir}/${component}" file="CHANGES" />
    <copy todir="${dist_dir}/${component}" file="project.properties" />
    <copy todir="${dist_dir}/${component}" file="project.xml" />

    <!-- source code -->
    <copy todir="${dist_dir}/${component}/${src_dir}" >
      <fileset dir="${src_dir}" includes="*.jar"/>
      <fileset dir="${src_dir}" includes="**/*.java"/>
    </copy>
    <copy todir="${dist_dir}/${component}/${test_src_dir}" >
      <fileset dir="${test_src_dir}" includes="**/*.java"/>
    </copy>
    <!-- any documentation -->
    <copy todir="${dist_dir}/${component}/${xdoc_dir}" >
      <fileset dir="${xdoc_dir}" includes="**/*.css"/>
      <fileset dir="${xdoc_dir}" includes="**/*.gif"/>
      <fileset dir="${xdoc_dir}" includes="**/*html"/>
      <fileset dir="${xdoc_dir}" includes="**/*.jpg"/>
      <fileset dir="${xdoc_dir}" includes="**/*.php"/>
      <fileset dir="${xdoc_dir}" includes="**/*.png"/>
      <fileset dir="${xdoc_dir}" includes="**/*.xml"/>
    </copy>

    <zip destfile="${zip_dir}/${dist_name}.zip"
         basedir="${dist_base}"/>
  </target>
  <!-- ========================================================== -->
  <!-- C L E A N                                                  -->
  <!-- ========================================================== -->
  <target name="clean"
                  description="o Clean up the generated directories">
    <delete file="${lib_dir}/xlattice/${dist_name}.jar"/>
    <delete dir="${build_dir}"/>
    <delete dir="${dist_dir}"/>
  </target>
</project>
